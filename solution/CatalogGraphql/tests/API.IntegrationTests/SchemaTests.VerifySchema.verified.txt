schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

interface UserError {
  message: String!
  code: String!
}

type AnotherMutationTestDto {
  string: String
}

type Author implements Node {
  removeBook(bookId: UUID!): Book!
  birthdate: LocalDate!
  books: [Book!] @cost(weight: "10")
  firstName: String!
  lastName: String!
  organizationId: UUID!
  id: ID!
  createdAt: DateTime!
  modifiedAt: DateTime!
  modifiedBy: UUID!
}

"A connection to a list of items."
type AuthorsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AuthorsEdge!]
  "A flattened list of the nodes."
  nodes: [Author!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type AuthorsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Author!
}

type Book implements Node {
  title: String!
  datePublished: LocalDate!
  author: Author!
  authorId: UUID!
  price: Decimal!
  id: ID!
  createdAt: DateTime!
  modifiedAt: DateTime!
  modifiedBy: UUID!
}

"A connection to a list of items."
type BooksConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BooksEdge!]
  "A flattened list of the nodes."
  nodes: [Book!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type BooksEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Book!
}

type CreateAuthorDto {
  author: Author
  errors: [CreateAuthorError!]
}

type CreateBookDto {
  book: Book
  errors: [CreateBookError!]
}

type DeleteAuthorDto {
  deleteAuthorPayload: DeleteAuthorPayload
  errors: [DeleteAuthorError!]
}

type DeleteAuthorPayload {
  success: Boolean!
  id: UUID!
}

type DeleteBookDto {
  deleteBookPayload: DeleteBookPayload
  errors: [DeleteBookError!]
}

type DeleteBookPayload {
  success: Boolean!
  id: UUID!
}

type DomainRuleError implements UserError {
  message: String!
  code: String!
}

type EntityNotFoundError implements UserError {
  message: String!
  code: String!
}

type Mutation {
  createAuthor(command: CreateAuthorCommand!): CreateAuthorDto! @cost(weight: "10")
  updateAuthor(command: UpdateAuthorCommand!): UpdateAuthorDto! @cost(weight: "10")
  deleteAuthor(command: DeleteAuthorCommand!): DeleteAuthorDto! @cost(weight: "10")
  mutationTest: MutationTestDto! @cost(weight: "10")
  anotherMutationTest: AnotherMutationTestDto! @cost(weight: "10")
  mutationWithMultipleRepositories: MutationWithMultipleRepositoriesDto! @cost(weight: "10")
  createBook(command: CreateBookCommand!): CreateBookDto! @cost(weight: "10")
  updateBook(command: UpdateBookCommand!): UpdateBookDto! @cost(weight: "10")
  deleteBook(command: DeleteBookCommand!): DeleteBookDto! @cost(weight: "10")
}

type MutationTestDto {
  string: String
}

type MutationWithMultipleRepositoriesDto {
  string: String
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node @cost(weight: "10")
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]! @cost(weight: "10")
  authorById(id: ID!): AuthorByIdResult! @cost(weight: "10")
  authors("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AuthorFilterInput @cost(weight: "10") order: [AuthorSortInput!] @cost(weight: "10")): AuthorsConnection @listSize(assumedSize: 10, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  bookById(id: ID!): BookByIdResult! @cost(weight: "10")
  books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BookFilterInput @cost(weight: "10") order: [BookSortInput!] @cost(weight: "10")): BooksConnection @listSize(assumedSize: 10, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
}

type Subscription {
  onAuthorCreated: Author!
}

type UpdateAuthorDto {
  author: Author
  errors: [UpdateAuthorError!]
}

type UpdateBookDto {
  book: Book
  errors: [UpdateBookError!]
}

union AuthorByIdResult = Author | EntityNotFoundError

union BookByIdResult = Book | EntityNotFoundError

union CreateAuthorError = DomainRuleError

union CreateBookError = DomainRuleError

union DeleteAuthorError = DomainRuleError | EntityNotFoundError

union DeleteBookError = EntityNotFoundError

union UpdateAuthorError = DomainRuleError | EntityNotFoundError

union UpdateBookError = DomainRuleError | EntityNotFoundError

input AuthorFilterInput {
  and: [AuthorFilterInput!]
  or: [AuthorFilterInput!]
  birthdate: LocalDateOperationFilterInput
  books: ListFilterInputTypeOfBookFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  organizationId: UuidOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  modifiedAt: DateTimeOperationFilterInput
  modifiedBy: UuidOperationFilterInput
}

input AuthorSortInput {
  birthdate: SortEnumType @cost(weight: "10")
  firstName: SortEnumType @cost(weight: "10")
  lastName: SortEnumType @cost(weight: "10")
  organizationId: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  modifiedAt: SortEnumType @cost(weight: "10")
  modifiedBy: SortEnumType @cost(weight: "10")
}

input BookFilterInput {
  and: [BookFilterInput!]
  or: [BookFilterInput!]
  title: StringOperationFilterInput
  datePublished: LocalDateOperationFilterInput
  author: AuthorFilterInput
  authorId: UuidOperationFilterInput
  price: DecimalOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  modifiedAt: DateTimeOperationFilterInput
  modifiedBy: UuidOperationFilterInput
}

input BookSortInput {
  title: SortEnumType @cost(weight: "10")
  datePublished: SortEnumType @cost(weight: "10")
  author: AuthorSortInput @cost(weight: "10")
  authorId: SortEnumType @cost(weight: "10")
  price: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  modifiedAt: SortEnumType @cost(weight: "10")
  modifiedBy: SortEnumType @cost(weight: "10")
}

input CreateAuthorCommand {
  firstName: String!
  lastName: String!
  birthdate: LocalDate!
  organizationId: UUID!
}

input CreateBookCommand {
  authorId: UUID!
  title: String!
  datePublished: LocalDate!
  price: Decimal!
}

input DateTimeOperationFilterInput {
  eq: DateTime @cost(weight: "10")
  neq: DateTime @cost(weight: "10")
  in: [DateTime] @cost(weight: "10")
  nin: [DateTime] @cost(weight: "10")
  gt: DateTime @cost(weight: "10")
  ngt: DateTime @cost(weight: "10")
  gte: DateTime @cost(weight: "10")
  ngte: DateTime @cost(weight: "10")
  lt: DateTime @cost(weight: "10")
  nlt: DateTime @cost(weight: "10")
  lte: DateTime @cost(weight: "10")
  nlte: DateTime @cost(weight: "10")
}

input DecimalOperationFilterInput {
  eq: Decimal @cost(weight: "10")
  neq: Decimal @cost(weight: "10")
  in: [Decimal] @cost(weight: "10")
  nin: [Decimal] @cost(weight: "10")
  gt: Decimal @cost(weight: "10")
  ngt: Decimal @cost(weight: "10")
  gte: Decimal @cost(weight: "10")
  ngte: Decimal @cost(weight: "10")
  lt: Decimal @cost(weight: "10")
  nlt: Decimal @cost(weight: "10")
  lte: Decimal @cost(weight: "10")
  nlte: Decimal @cost(weight: "10")
}

input DeleteAuthorCommand {
  id: UUID!
}

input DeleteBookCommand {
  id: UUID!
}

input ListFilterInputTypeOfBookFilterInput {
  all: BookFilterInput @cost(weight: "10")
  none: BookFilterInput @cost(weight: "10")
  some: BookFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input LocalDateOperationFilterInput {
  eq: LocalDate @cost(weight: "10")
  neq: LocalDate @cost(weight: "10")
  in: [LocalDate] @cost(weight: "10")
  nin: [LocalDate] @cost(weight: "10")
  gt: LocalDate @cost(weight: "10")
  ngt: LocalDate @cost(weight: "10")
  gte: LocalDate @cost(weight: "10")
  ngte: LocalDate @cost(weight: "10")
  lt: LocalDate @cost(weight: "10")
  nlt: LocalDate @cost(weight: "10")
  lte: LocalDate @cost(weight: "10")
  nlte: LocalDate @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input UpdateAuthorCommand {
  id: UUID!
  firstName: String!
  lastName: String!
  birthdate: LocalDate!
}

input UpdateBookCommand {
  id: UUID!
  title: String!
  datePublished: LocalDate!
  price: Decimal!
}

input UuidOperationFilterInput {
  eq: UUID @cost(weight: "10")
  neq: UUID @cost(weight: "10")
  in: [UUID] @cost(weight: "10")
  nin: [UUID] @cost(weight: "10")
  gt: UUID @cost(weight: "10")
  ngt: UUID @cost(weight: "10")
  gte: UUID @cost(weight: "10")
  ngte: UUID @cost(weight: "10")
  lt: UUID @cost(weight: "10")
  nlt: UUID @cost(weight: "10")
  lte: UUID @cost(weight: "10")
  nlte: UUID @cost(weight: "10")
}

enum SortEnumType {
  ASC
  DESC
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query." slicingArgumentDefaultValue: Int "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal

"The `LocalDate` scalar type represents a ISO date string, represented as UTF-8 character sequences YYYY-MM-DD. The scalar follows the specification defined in RFC3339"
scalar LocalDate

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")