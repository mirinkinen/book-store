schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface UserError {
  message: String!
  code: String!
}

type AnotherMutationTestDto {
  string: String
}

"Represents an author."
type Author {
  books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BookFilterInput @cost(weight: "10") order: [BookSortInput!] @cost(weight: "10")): BookConnection! @listSize(assumedSize: 10, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  customBooks("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BookFilterInput @cost(weight: "10") order: [BookSortInput!] @cost(weight: "10")): BookConnection! @listSize(assumedSize: 10, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  "ID of the author."
  id: UUID!
  "Birthdate of the author."
  birthdate: LocalDate!
  "First name of the author."
  firstName: String!
  "Last name of the author."
  lastName: String!
  "Identifier of the organization associated with the author."
  organizationId: UUID!
}

"A connection to a list of items."
type AuthorConnection {
  "A list of edges."
  edges: [AuthorEdge!]
  "A flattened list of the nodes"
  nodes: [Author!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

type AuthorEdge {
  "The item at the end of the edge."
  node: Author!
  "A cursor for use in pagination."
  cursor: String!
}

type Book {
  author: Author @cost(weight: "10")
  reviews("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ReviewFilterInput @cost(weight: "10") order: [ReviewSortInput!] @cost(weight: "10")): ReviewConnection! @listSize(assumedSize: 10, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  id: UUID!
  title: String!
  datePublished: LocalDate!
  authorId: UUID!
  price: Decimal!
}

"A connection to a list of items."
type BookConnection {
  "A list of edges."
  edges: [BookEdge!]
  "A flattened list of the nodes"
  nodes: [Book!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

type BookEdge {
  "The item at the end of the edge."
  node: Book!
  "A cursor for use in pagination."
  cursor: String!
}

type CreateAuthorDto {
  author: Author
  errors: [CreateAuthorError!]
}

type CreateBookDto {
  book: Book
  errors: [CreateBookError!]
}

type DeleteAuthorDto {
  deleteAuthorPayload: DeleteAuthorPayload
  errors: [DeleteAuthorError!]
}

type DeleteAuthorPayload {
  success: Boolean!
  id: UUID!
}

type DeleteBookDto {
  deleteBookPayload: DeleteBookPayload
  errors: [DeleteBookError!]
}

type DeleteBookPayload {
  success: Boolean!
  id: UUID!
}

type DomainRuleError implements UserError {
  message: String!
  code: String!
}

type EntityNotFoundError implements UserError {
  message: String!
  code: String!
}

type Mutation {
  createAuthor(command: CreateAuthorCommand!): CreateAuthorDto! @cost(weight: "10")
  updateAuthor(command: UpdateAuthorCommand!): UpdateAuthorDto! @cost(weight: "10")
  deleteAuthor(command: DeleteAuthorCommand!): DeleteAuthorDto! @cost(weight: "10")
  "Example that shows that scoped services are shared between concurrent mutations."
  mutationTest: MutationTestDto! @cost(weight: "10")
  "Example that shows that scoped services are shared between concurrent mutations."
  anotherMutationTest: AnotherMutationTestDto! @cost(weight: "10")
  mutationWithMultipleRepositories: MutationWithMultipleRepositoriesDto! @cost(weight: "10")
  createBook(command: CreateBookCommand!): CreateBookDto! @cost(weight: "10")
  updateBook(command: UpdateBookCommand!): UpdateBookDto! @cost(weight: "10")
  deleteBook(command: DeleteBookCommand!): DeleteBookDto! @cost(weight: "10")
}

type MutationTestDto {
  string: String
}

type MutationWithMultipleRepositoriesDto {
  string: String
}

"A cursor that points to a specific page."
type PageCursor {
  "The page number."
  page: Int!
  "The cursor."
  cursor: String!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "A list of cursors to continue paginating forwards."
  forwardCursors: [PageCursor!]!
  "A list of cursors to continue paginating backwards."
  backwardCursors: [PageCursor!]!
}

type Query {
  authorById(id: UUID!): AuthorByIdResult! @cost(weight: "10")
  authors("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AuthorFilterInput @cost(weight: "10") order: [AuthorSortInput!] @cost(weight: "10")): AuthorConnection! @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  bookById(id: UUID!): BookByIdResult! @cost(weight: "10")
  books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BookFilterInput @cost(weight: "10") order: [BookSortInput!] @cost(weight: "10")): BookConnection! @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  reviewById(id: UUID!): ReviewByIdResult! @cost(weight: "10")
  reviews("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ReviewFilterInput @cost(weight: "10") order: [ReviewSortInput!] @cost(weight: "10")): ReviewConnection! @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
}

type Review {
  book: Book @cost(weight: "10")
  id: UUID!
  title: String!
  body: String!
  bookId: UUID!
}

"A connection to a list of items."
type ReviewConnection {
  "A list of edges."
  edges: [ReviewEdge!]
  "A flattened list of the nodes"
  nodes: [Review!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

type ReviewEdge {
  "The item at the end of the edge."
  node: Review!
  "A cursor for use in pagination."
  cursor: String!
}

type Subscription {
  onAuthorCreated: Author!
}

type UpdateAuthorDto {
  author: Author
  errors: [UpdateAuthorError!]
}

type UpdateBookDto {
  book: Book
  errors: [UpdateBookError!]
}

union AuthorByIdResult = Author | EntityNotFoundError

union BookByIdResult = Book | EntityNotFoundError

union CreateAuthorError = DomainRuleError

union CreateBookError = DomainRuleError

union DeleteAuthorError = DomainRuleError | EntityNotFoundError

union DeleteBookError = EntityNotFoundError

union ReviewByIdResult = Review | EntityNotFoundError

union UpdateAuthorError = DomainRuleError | EntityNotFoundError

union UpdateBookError = DomainRuleError | EntityNotFoundError

"Represents an author."
input AuthorFilterInput {
  and: [AuthorFilterInput!]
  or: [AuthorFilterInput!]
  "ID of the author."
  id: UuidOperationFilterInput
  "Birthdate of the author."
  birthdate: LocalDateOperationFilterInput
  "First name of the author."
  firstName: StringOperationFilterInput
  "Last name of the author."
  lastName: StringOperationFilterInput
  "Identifier of the organization associated with the author."
  organizationId: UuidOperationFilterInput
}

"Represents an author."
input AuthorSortInput {
  "ID of the author."
  id: SortEnumType @cost(weight: "10")
  "Birthdate of the author."
  birthdate: SortEnumType @cost(weight: "10")
  "First name of the author."
  firstName: SortEnumType @cost(weight: "10")
  "Last name of the author."
  lastName: SortEnumType @cost(weight: "10")
  "Identifier of the organization associated with the author."
  organizationId: SortEnumType @cost(weight: "10")
}

input BookFilterInput {
  and: [BookFilterInput!]
  or: [BookFilterInput!]
  id: UuidOperationFilterInput
  title: StringOperationFilterInput
  datePublished: LocalDateOperationFilterInput
  authorId: UuidOperationFilterInput
  price: DecimalOperationFilterInput
}

input BookSortInput {
  id: SortEnumType @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  datePublished: SortEnumType @cost(weight: "10")
  authorId: SortEnumType @cost(weight: "10")
  price: SortEnumType @cost(weight: "10")
}

input CreateAuthorCommand {
  firstName: String!
  lastName: String!
  birthdate: LocalDate!
  organizationId: UUID!
}

input CreateBookCommand {
  authorId: UUID!
  title: String!
  datePublished: LocalDate!
  price: Decimal!
}

input DecimalOperationFilterInput {
  eq: Decimal @cost(weight: "10")
  neq: Decimal @cost(weight: "10")
  in: [Decimal] @cost(weight: "10")
  nin: [Decimal] @cost(weight: "10")
  gt: Decimal @cost(weight: "10")
  ngt: Decimal @cost(weight: "10")
  gte: Decimal @cost(weight: "10")
  ngte: Decimal @cost(weight: "10")
  lt: Decimal @cost(weight: "10")
  nlt: Decimal @cost(weight: "10")
  lte: Decimal @cost(weight: "10")
  nlte: Decimal @cost(weight: "10")
}

input DeleteAuthorCommand {
  id: UUID!
}

input DeleteBookCommand {
  id: UUID!
}

input LocalDateOperationFilterInput {
  eq: LocalDate @cost(weight: "10")
  neq: LocalDate @cost(weight: "10")
  in: [LocalDate] @cost(weight: "10")
  nin: [LocalDate] @cost(weight: "10")
  gt: LocalDate @cost(weight: "10")
  ngt: LocalDate @cost(weight: "10")
  gte: LocalDate @cost(weight: "10")
  ngte: LocalDate @cost(weight: "10")
  lt: LocalDate @cost(weight: "10")
  nlt: LocalDate @cost(weight: "10")
  lte: LocalDate @cost(weight: "10")
  nlte: LocalDate @cost(weight: "10")
}

input ReviewFilterInput {
  and: [ReviewFilterInput!]
  or: [ReviewFilterInput!]
  id: UuidOperationFilterInput
  title: StringOperationFilterInput
  body: StringOperationFilterInput
  bookId: UuidOperationFilterInput
}

input ReviewSortInput {
  id: SortEnumType @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  body: SortEnumType @cost(weight: "10")
  bookId: SortEnumType @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input UpdateAuthorCommand {
  id: UUID!
  firstName: String!
  lastName: String!
  birthdate: LocalDate!
}

input UpdateBookCommand {
  id: UUID!
  title: String!
  datePublished: LocalDate!
  price: Decimal!
}

input UuidOperationFilterInput {
  eq: UUID @cost(weight: "10")
  neq: UUID @cost(weight: "10")
  in: [UUID] @cost(weight: "10")
  nin: [UUID] @cost(weight: "10")
  gt: UUID @cost(weight: "10")
  ngt: UUID @cost(weight: "10")
  gte: UUID @cost(weight: "10")
  ngte: UUID @cost(weight: "10")
  lt: UUID @cost(weight: "10")
  nlt: UUID @cost(weight: "10")
  lte: UUID @cost(weight: "10")
  nlte: UUID @cost(weight: "10")
}

enum SortEnumType {
  ASC
  DESC
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query." slicingArgumentDefaultValue: Int "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal

"The `LocalDate` scalar type represents a ISO date string, represented as UTF-8 character sequences YYYY-MM-DD. The scalar follows the specification defined in RFC3339"
scalar LocalDate

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")